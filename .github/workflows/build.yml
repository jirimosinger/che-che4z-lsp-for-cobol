# Copyright (c) 2023 Broadcom.
# The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Broadcom, Inc. - initial API and implementation

name: build

on:
  workflow_dispatch:
    inputs:
      with_telemetry:
        description: "Build with telemetry"
        required: true
        default: 'false'
      skip_ui_tests:
        description: "Skip UI tests"
        required: true
        default: 'false'
  pull_request:
    branches:
      - development
      - master
  push:
    branches:
      - development
      - master

jobs:
  generateNativeConfig:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ## uncomment me if you need native image job reports
          # native-image-job-reports: 'true'
          cache: 'maven'
      - name: Generate assisted configuration for GraalVM native build
        working-directory: server
        run: mvn -e -B -Pnative -Dagent=true -Dtest=\!PositiveTest* -DfailIfNoTests=false test
      - name: Upload native build configuration
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: warn
          name: native-build-configuration
          path: server/engine/target/native/agent-output/test/*

  buildNative:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            native: linux-x64
            maven_profile_prefix: linux-
          - os: ubuntu-22.04
            native: linux-arm64
            maven_profile_prefix: linux-
          - os: windows-2022
            native: win32-x64
            artifacts-ext: .exe
          - os: windows-2022
            native: win32-arm64
            artifacts-ext: .exe
            skip-test: true
          - os: macos-13
            native: darwin-x64
          - os: macos-14
            native: darwin-arm64
    runs-on: ${{ matrix.os }}
    needs: [generateNativeConfig]
    steps:
      - uses: actions/checkout@v3
      - uses: graalvm/setup-graalvm@v1
        if: matrix.native == 'linux-x64' || matrix.native == 'linux-arm64'
        with:
          version: '22.3.0'
          java-version: '11'
          components: 'native-image'
          native-image-musl: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ## uncomment me if you need native image job reports
          # native-image-job-reports: 'true'
          cache: 'maven'
      - uses: graalvm/setup-graalvm@v1
        if: matrix.native != 'linux-x64' && matrix.native != 'linux-arm64'
        with:
          version: '22.3.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ## uncomment me if you need native image job reports
          # native-image-job-reports: 'true'
          cache: 'maven'
      - name: Retrieve native build configurations
        uses: actions/download-artifact@v4
        with:
          name: native-build-configuration
          path: native-build-configuration
      - name: Verify musl setup
        if: matrix.native == 'linux-x64' || matrix.native == 'linux-arm64'
        run: ./.github/scripts/verify_musl_setup.sh
        shell: bash {0}
      - name: Add graalVM configuration to server
        run: |
          cp -rp native-build-configuration/session-* server/engine/src/main/resources/META-INF/native-image/
          rm server/engine/src/main/resources/META-INF/native-image/session-*/jni-config.json
        shell: bash
      - name: Build with Maven
        working-directory: server
        run: mvn -e -B -P${{ maven_profile_prefix }}native -DskipTests clean package
      - name: Rename to cobol-ls
        if: matrix.os == 'windows-2022'
        shell: bash
        run: | 
          mv server/engine/target/engine.build_artifacts.txt server/engine/target/cobol-ls.build_artifacts.txt
          mv server/engine/target/engine.exe server/engine/target/cobol-ls.exe
      - name: Rename to cobol-ls
        if: matrix.os != 'windows-2022'
        shell: bash
        run: | 
          mv server/engine/target/engine ./server/engine/target/cobol-ls
      - name: Prepare windows artifacts
        if: matrix.os == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: cobol-ls-${{ matrix.native }}
          path: |
            server/engine/target/*.exe
            server/engine/target/*.dll
            server/engine/target/*.txt
          if-no-files-found: error
      - name: Prepare non-windows artifacts
        if: matrix.os != 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: cobol-ls-${{ matrix.native }}
          path: server/engine/target/cobol-ls
          if-no-files-found: error
